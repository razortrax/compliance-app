generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accident_issue {
  id           String   @id
  issueId      String   @unique
  accidentDate DateTime
  location     String?
  severity     String
  reportNumber String?
  isReportable Boolean  @default(false)
  issue        issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model consultant {
  id              String         @id
  partyId         String         @unique
  licenseNumber   String?
  specializations String[]
  yearsExperience Int?
  hourlyRate      Decimal?
  bio             String?
  isActive        Boolean        @default(true)
  isVerified      Boolean        @default(false)
  party           party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
  consultation    consultation[]
}

model consultant_access_log {
  id                   String               @id
  consentId            String
  accessedAt           DateTime             @default(now())
  action               String
  resourceType         String
  resourceId           String?
  details              String?
  ipAddress            String?
  userAgent            String?
  data_sharing_consent data_sharing_consent @relation(fields: [consentId], references: [id], onDelete: Cascade)
}

model consultation {
  id                   String                @id
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  clientOrgId          String
  consultantId         String
  title                String
  description          String?
  consultationType     String
  status               String                @default("REQUESTED")
  urgency              String                @default("NORMAL")
  requestedAt          DateTime              @default(now())
  acceptedAt           DateTime?
  startDate            DateTime?
  endDate              DateTime?
  dataAccessExpiry     DateTime?
  agreedRate           Decimal?
  estimatedHours       Int?
  actualHours          Decimal?
  organization         organization          @relation(fields: [clientOrgId], references: [id])
  consultant           consultant            @relation(fields: [consultantId], references: [id])
  data_sharing_consent data_sharing_consent?
}

model data_sharing_consent {
  id                    String                  @id
  consultationId        String                  @unique
  consentGivenAt        DateTime                @default(now())
  consentGivenBy        String
  isActive              Boolean                 @default(true)
  revokedAt             DateTime?
  revokedBy             String?
  scopePermissions      Json
  consultant_access_log consultant_access_log[]
  consultation          consultation            @relation(fields: [consultationId], references: [id], onDelete: Cascade)
}

model equipment {
  id                 String    @id
  partyId            String    @unique
  vehicleType        String
  make               String?
  model              String?
  year               Int?
  vinNumber          String?   @unique
  plateNumber        String?
  registrationExpiry DateTime?
  locationId         String?   // Equipment can be assigned to specific location
  party              party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
  location           location? @relation(fields: [locationId], references: [id])
}

model inspection_issue {
  id             String   @id
  issueId        String   @unique
  inspectionDate DateTime
  inspectorName  String?
  violationCount Int      @default(0)
  outOfService   Boolean  @default(false)
  issue          issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model issue {
  id               String            @id
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  issueType        String
  status           String            @default("open")
  priority         String            @default("medium")
  partyId          String
  title            String
  description      String?
  dueDate          DateTime?
  resolvedAt       DateTime?
  accident_issue   accident_issue?
  inspection_issue inspection_issue?
  mvr_issue        mvr_issue?
  physical_issue   physical_issue?
  drugalcohol_issue drugalcohol_issue?
  roadside_inspection_issue roadside_inspection_issue?
  party            party             @relation(fields: [partyId], references: [id])
  license_issue    license_issue?
  training_issue   training_issue?
  attachments      attachment[]      // Issue can have multiple attachments
}

enum MvrType {
  PreHire_Check
  Annual_Review
  Drug_Testing_Clearinghouse
  After_Accident
  Reasonable_Suspicion
  Endorsement_Update
  Med_Cert_Update
}

enum MvrResult {
  Pass
  Fail
  Scheduled
  Old_Certificate
  Inactive
}

enum MvrResultDach {
  Pass
  Fail
  Not_Required
}

enum MvrResultStatus {
  Result_Meets
  Result_Does_Not_Meet
  Result_Disqualified
}

enum MvrCertification {
  NonExcepted_Interstate
  Excepted_Interstate
  NonExcepted_Intrastate
  ExceptedIntrastate
  None
}

enum MvrStatus {
  Not_Released
  Active
  Inactive
  Disqualified
  Not_Driver
  One_Time_Training
}

enum PhysicalType {
  Annual
  Bi_Annual
  Return_to_Duty
  Post_Accident
  One_Month
  Three_Month
  Six_Month
  Pre_Hire
  No_Physical_Issue
}

enum DrugAlcoholResult {
  Negative
  Positive
  Negative_Dilute
}

enum DrugAlcoholReason {
  PreEmployment
  Random
  Reasonable_Suspicion
  Post_Accident
  Return_to_Duty
  FollowUp
  Other
}

enum DrugAlcoholAgency {
  FMCSA
  PHMSA
  Non_DOT
  Drug_Testing_Clearinghouse
  Water_Tech_Energy
}

model mvr_issue {
  id               String           @id @default(cuid())
  issueId          String           @unique
  state            String           // VARCHAR(2)
  violationsCount  Int              @default(0)
  cleanRecord      Boolean          @default(true)
  notes            String?
  type             MvrType?
  result           MvrResult?
  result_dach      MvrResultDach?
  result_status    MvrResultStatus?
  reviewedBy       Json?
  certification    MvrCertification?
  status           MvrStatus?
  startDate        DateTime?        // When MVR period started
  expirationDate   DateTime?        // When MVR expires (typically 1 year from start)
  renewalDate      DateTime?        // When MVR was renewed/processed
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  issue            issue            @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model physical_issue {
  id               String           @id @default(cuid())
  issueId          String           @unique
  type             PhysicalType?
  medicalExaminer  String?          // VARCHAR(255)
  selfCertified    Boolean          @default(false)
  nationalRegistry Boolean          @default(false)
  startDate        DateTime?        // When physical period started
  expirationDate   DateTime?        // When physical expires
  renewalDate      DateTime?        // When physical was renewed/processed
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  issue            issue            @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model drugalcohol_issue {
  id              String                 @id @default(cuid())
  issueId         String                 @unique
  result          DrugAlcoholResult?     // Test result
  substance       String?                // Substance tested for (VARCHAR(50))
  lab             String?                // Testing laboratory (VARCHAR(255))
  accreditedBy    String?                // Accrediting body (VARCHAR(100))
  notes           String?                // Additional notes about the test
  reason          DrugAlcoholReason?     // Reason for test
  agency          DrugAlcoholAgency?     // Testing agency
  specimenNumber  String?                // Number specimen (renamed from number_specimen)
  isDrug          Boolean                @default(false) // is_drug
  isAlcohol       Boolean                @default(false) // is_alcohol
  clinic          Json?                  // Clinic information (JSON)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  // Relations
  issue           issue                  @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model license_issue {
  id               String    @id @default(cuid())
  issueId          String    @unique
  licenseType      String
  licenseState     String
  licenseNumber    String
  certification    String
  startDate        DateTime?
  expirationDate   DateTime
  renewalDate      DateTime?
  endorsements     Json?
  restrictions     Json?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  issue            issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model training_issue {
  id               String    @id @default(cuid())
  issueId          String    @unique
  trainingType     String    // HazMat Annual, Defensive Driving, etc.
  provider         String?   // Training company/organization
  instructor       String?   // Instructor name
  location         String?   // Training location
  startDate        DateTime? // When training period started
  completionDate   DateTime  // When training was completed
  expirationDate   DateTime  // When training expires
  certificateNumber String?  // Certificate/completion number
  hours            Float?    // Training hours completed
  isRequired       Boolean   @default(false) // Required vs voluntary
  competencies     Json?     // Skills/topics covered
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  issue            issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model attachment {
  id           String   @id @default(cuid())
  issueId      String   // Links to any issue (license, inspection, etc.)
  fileName     String   // Original filename
  fileType     String   // MIME type (image/jpeg, application/pdf, etc.)
  fileSize     Int      // File size in bytes
  filePath     String   // Storage path/URL (empty for notes)
  attachmentType String // 'license_front', 'license_back', 'note', 'endorsement_doc', etc.
  description  String?  // Optional description
  noteContent  String?  // For text-based addons (notes)
  uploadedBy   String   // User ID who uploaded
  createdAt    DateTime @default(now())
  
  // Relationships
  issue        issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model location {
  id               String       @id
  partyId          String?      @unique  // NEW: Makes location a party entity
  organizationId   String       // Keep for backward compatibility during transition
  name             String
  locationType     String       // terminal, yard, office, warehouse
  address          String
  city             String
  state            String
  zipCode          String
  phone            String?
  email            String?
  isMainLocation   Boolean      @default(false)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  party            party?       @relation(fields: [partyId], references: [id], onDelete: Cascade)
  organization     organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  equipment        equipment[]
  role             role[]       // Staff and drivers assigned to this location
}

model organization {
  id           String         @id
  partyId      String         @unique
  name         String
  dotNumber    String?        @unique
  einNumber    String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  phone        String?
  consultation consultation[]
  location     location[]
  party        party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model party {
  id           String        @id
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       String        @default("active")
  userId       String?
  consultant   consultant?
  equipment    equipment?
  issue        issue[]
  organization organization?
  location     location?     // NEW: Location can be a party
  person       person?
  role         role[]
}

model person {
  id            String    @id
  partyId       String    @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime?
  licenseNumber String?   @unique
  phone         String?
  email         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  party         party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model role {
  id             String    @id
  partyId        String
  roleType       String
  organizationId String?
  locationId     String?   // Role can be assigned to specific location
  status         String    @default("pending")
  startDate      DateTime  @default(now())
  endDate        DateTime?
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  consultationId String?
  party          party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
  location       location? @relation(fields: [locationId], references: [id])
}

enum RinsLevel {
  Level_I
  Level_II
  Level_III
  Level_IV
  Level_V
  Level_VI
}

enum RinsResult {
  Pass
  Warning
  Out_Of_Service
}

enum DverSource {
  Driver_Reported
  FMCSA_Portal_Check
  Third_Party_Report
}

enum EntryMethod {
  Manual_Entry
  OCR_Upload
  API_Import
}

enum ViolationType {
  Company
  Driver_Qualification
  Driver_Performance
  Equipment
}

enum ViolationSeverity {
  Warning
  Citation
  Out_Of_Service
}

model roadside_inspection_issue {
  id                    String                 @id @default(cuid())
  issueId               String                 @unique
  
  // DVER Header Information
  reportNumber          String?                // USP070000063
  inspectionDate        DateTime               // Date of inspection
  inspectionTime        String?                // Time of inspection
  inspectorName         String                 // Inspector name
  inspectorBadge        String?                // Badge number
  
  // Location Details
  inspectionLocation    String                 // NEWBERRY SC
  facilityName          String?                // WATER TECH TRANSPORTATION LLC
  facilityAddress       String?
  facilityCity          String?
  facilityState         String?
  facilityZip           String?
  
  // Inspection Details
  inspectionLevel       RinsLevel?             // Level I-VI
  overallResult         RinsResult?            // Pass/Warning/OOS
  
  // Driver Information (from DVER)
  driverLicense         String?                // License number
  driverLicenseState    String?                // License state
  driverDOB             DateTime?              // Date of birth
  
  // DVER Processing
  dverReceived          Boolean                @default(false)
  dverSource            DverSource?            // How we got the DVER
  entryMethod           EntryMethod            @default(Manual_Entry)
  
  // Relationships
  equipment             rins_equipment_involvement[]
  violations            rins_violation[]
  
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  // Relations
  issue                 issue                  @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model rins_equipment_involvement {
  id              String                 @id @default(cuid())
  rinsId          String                 // FK to roadside_inspection_issue
  unitNumber      Int                    // 1, 2, or 3
  unitType        String?                // TT, TLR, etc.
  make            String?                // PTRB, UTIL
  model           String?
  year            Int?
  plateNumber     String?
  plateState      String?
  vin             String?
  equipmentId     String?                // FK to equipment party if exists
  cvsaSticker     String?
  oosSticker      String?
  
  createdAt       DateTime               @default(now())
  
  // Relations
  roadside_inspection roadside_inspection_issue @relation(fields: [rinsId], references: [id], onDelete: Cascade)
}

model rins_violation {
  id                    String                 @id @default(cuid())
  rinsId                String                 // FK to roadside_inspection_issue
  violationCode         String                 // 392.2A(1)
  section               String?                // Full section reference
  unitNumber            Int?                   // Which equipment unit (1,2,3) or null for driver
  outOfService          Boolean                @default(false)
  outOfServiceDate      DateTime?              // When placed out of service
  backInServiceDate     DateTime?              // When returned to service
  citationNumber        String?
  severity              ViolationSeverity?
  description           String
  inspectorComments     String?
  
  // For assignment (Phase 1B)
  violationType         ViolationType?         // Driver, Equipment, Company
  assignedPartyId       String?                // FK to responsible party
  
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  // Relations
  roadside_inspection   roadside_inspection_issue @relation(fields: [rinsId], references: [id], onDelete: Cascade)
}
