generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// UNIFIED INCIDENT MANAGEMENT SYSTEM
// Replaces: accident_issue + roadside_inspection_issue  
// ===========================================

// Base incident model for both accidents and roadside inspections
model incident {
  id           String       @id @default(cuid())
  issueId      String       @unique
  incidentType IncidentType // ACCIDENT | ROADSIDE_INSPECTION

  // Common timing information
  incidentDate DateTime // Date of incident/inspection
  incidentTime String? // Time of incident/inspection

  // Common officer/inspector information  
  officerName  String // Inspector name or responding officer
  agencyName   String? // Agency name
  officerBadge String? // Badge number (RSIN) or officer ID
  reportNumber String? // Report/inspection number

  // Common location information
  locationAddress String? // Location address
  locationCity    String? // Location city  
  locationState   String? // Location state
  locationZip     String? // Location zip

  // Incident-specific data (JSON for flexibility)
  accidentData Json? // Accident-specific fields
  roadsideData Json? // RSIN-specific fields

  // Common relationships
  equipment  incident_equipment_involvement[]
  violations incident_violation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  corrective_action_forms corrective_action_form[] // CAFs generated from this incident
}

// Unified equipment involvement (replaces both models)
model incident_equipment_involvement {
  id         String @id @default(cuid())
  incidentId String // FK to incident
  unitNumber Int // 1, 2, or 3

  // Equipment identification
  equipmentId String? // Optional link to equipment table
  unitType    String? // TT, TLR, etc. (RSIN) or vehicle type (Accident)
  make        String?
  model       String?
  year        Int?
  plateNumber String?
  plateState  String? // RSIN specific
  vin         String?

  // RSIN-specific fields (in JSON for accidents)
  cvsaSticker String? // RSIN only
  oosSticker  String? // RSIN only

  createdAt DateTime @default(now())

  // Relations
  incident  incident   @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  equipment equipment? @relation(fields: [equipmentId], references: [id])
}

// Unified violation system (replaces both models)
model incident_violation {
  id                String             @id @default(cuid())
  incidentId        String // FK to incident
  violationCode     String // 392.2A(1) or citation code
  section           String? // Full section reference
  unitNumber        Int? // Which equipment unit (1,2,3) or null for driver
  outOfService      Boolean            @default(false)
  outOfServiceDate  DateTime? // When placed out of service
  backInServiceDate DateTime? // When returned to service
  citationNumber    String?
  severity          ViolationSeverity?
  description       String // Description of violation
  inspectorComments String? // Officer/inspector comments

  // Assignment fields (existing)
  violationType   ViolationType? // Driver, Equipment, Company
  assignedPartyId String? // FK to responsible party

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  incident                incident                 @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  corrective_action_forms corrective_action_form[]
  violation_code_ref      violation_code?          @relation(fields: [violationCode], references: [code])
}

// New enum for incident types
enum IncidentType {
  ACCIDENT // Motor vehicle accidents
  ROADSIDE_INSPECTION // DOT roadside inspections  
}

model consultant {
  id              String         @id
  partyId         String         @unique
  licenseNumber   String?
  specializations String[]
  yearsExperience Int?
  hourlyRate      Decimal?
  bio             String?
  isActive        Boolean        @default(true)
  isVerified      Boolean        @default(false)
  party           party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
  consultation    consultation[]
}

model consultant_access_log {
  id                   String               @id
  consentId            String
  accessedAt           DateTime             @default(now())
  action               String
  resourceType         String
  resourceId           String?
  details              String?
  ipAddress            String?
  userAgent            String?
  data_sharing_consent data_sharing_consent @relation(fields: [consentId], references: [id], onDelete: Cascade)
}

model consultation {
  id                   String                @id
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  clientOrgId          String
  consultantId         String
  title                String
  description          String?
  consultationType     String
  status               String                @default("REQUESTED")
  urgency              String                @default("NORMAL")
  requestedAt          DateTime              @default(now())
  acceptedAt           DateTime?
  startDate            DateTime?
  endDate              DateTime?
  dataAccessExpiry     DateTime?
  agreedRate           Decimal?
  estimatedHours       Int?
  actualHours          Decimal?
  organization         organization          @relation(fields: [clientOrgId], references: [id])
  consultant           consultant            @relation(fields: [consultantId], references: [id])
  data_sharing_consent data_sharing_consent?
}

model data_sharing_consent {
  id                    String                  @id
  consultationId        String                  @unique
  consentGivenAt        DateTime                @default(now())
  consentGivenBy        String
  isActive              Boolean                 @default(true)
  revokedAt             DateTime?
  revokedBy             String?
  scopePermissions      Json
  consultant_access_log consultant_access_log[]
  consultation          consultation            @relation(fields: [consultationId], references: [id], onDelete: Cascade)
}

model equipment {
  id      String @id
  partyId String @unique

  // Basic equipment information
  make               String?
  model              String?
  year               Int?
  vin                String?   @unique // Changed from vinNumber to match CSV
  plateNumber        String?
  registrationExpiry DateTime?

  // Status and classification
  statusId String?
  status   EquipmentStatus? @relation(fields: [statusId], references: [id])

  // Weight specifications
  eqpWeightGross       Int?
  eqpWeightGrossRating Int?
  eqpWeightGrossTagged Int?

  // Fuel and engine information
  fuelTypeId         String?
  fuelType           EquipmentFuelType? @relation(fields: [fuelTypeId], references: [id])
  engineModel        String?
  engineDisplacement String?
  driveType          String?
  dateOfManufacture  DateTime?
  countCylinders     Int?

  // Physical characteristics
  countAxles Int?
  colorId    String?
  color      EquipmentColor? @relation(fields: [colorId], references: [id])
  tireSize   String?

  // Usage tracking
  startMileage  Int?
  startDate     DateTime?
  retireMileage Int?
  retireDate    DateTime?

  // Vehicle classification
  vehicleTypeId String?
  vehicleType   EquipmentVehicleType? @relation(fields: [vehicleTypeId], references: [id])

  // Ownership information  
  ownershipTypeId String?
  ownershipType   EquipmentOwnershipType? @relation(fields: [ownershipTypeId], references: [id])

  // Category
  categoryId String?
  category   EquipmentCategory? @relation(fields: [categoryId], references: [id])

  // Location assignment
  locationId String? // Equipment can be assigned to specific location
  location   location? @relation(fields: [locationId], references: [id])

  // Relationships
  party         party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
  activity_logs activity_log[] // Enhanced activity tracking for equipment
  action_items  action_item[]

  // Incident involvement relationships (unified)
  incident_involvement incident_equipment_involvement[]
}

model issue {
  id                      String                   @id
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime
  issueType               String
  status                  String                   @default("open")
  priority                String                   @default("medium")
  partyId                 String
  title                   String
  description             String?
  dueDate                 DateTime?
  resolvedAt              DateTime?
  // Incident relationships (unified system)
  incident                incident?
  party                   party                    @relation(fields: [partyId], references: [id])
  attachments             attachment[] // Issue can have multiple attachments
  activity_logs           activity_log[] // Enhanced activity tracking for issues
  action_items            action_item[]
  mvr_issue               mvr_issue?
  physical_issue          physical_issue?
  drugalcohol_issue       drugalcohol_issue?
  license_issue           license_issue?
  registration_issue      registration_issue?
  annual_inspection_issue annual_inspection_issue?
  training_issue          training_issue?
  maintenance_issue       maintenance_issue? // New comprehensive maintenance management
}

enum MvrType {
  PreHire_Check
  Annual_Review
  Drug_Testing_Clearinghouse
  After_Accident
  Reasonable_Suspicion
  Endorsement_Update
  Med_Cert_Update
}

enum MvrResult {
  Pass
  Fail
  Scheduled
  Old_Certificate
  Inactive
}

enum MvrResultDach {
  Pass
  Fail
  Not_Required
}

enum MvrResultStatus {
  Result_Meets
  Result_Does_Not_Meet
  Result_Disqualified
}

enum MvrCertification {
  NonExcepted_Interstate
  Excepted_Interstate
  NonExcepted_Intrastate
  ExceptedIntrastate
  None
}

enum MvrStatus {
  Not_Released
  Active
  Inactive
  Disqualified
  Not_Driver
  One_Time_Training
}

enum PhysicalType {
  Annual
  Bi_Annual
  Return_to_Duty
  Post_Accident
  One_Month
  Three_Month
  Six_Month
  Pre_Hire
  No_Physical_Issue
}

enum PhysicalResult {
  Three_Month
  Six_Month
  One_Year
  Two_Years
  Disqualified
}

enum PhysicalStatus {
  Qualified
  Disqualified
}

enum DrugAlcoholResult {
  Negative
  Positive
  Negative_Dilute
}

enum DrugAlcoholReason {
  PreEmployment
  Random
  Reasonable_Suspicion
  Post_Accident
  Return_to_Duty
  FollowUp
  Other
}

enum DrugAlcoholAgency {
  FMCSA
  PHMSA
  Non_DOT
  Drug_Testing_Clearinghouse
  Water_Tech_Energy
}

enum TrainingCategory {
  MANDATORY_DOT // DOT required training (e.g., HazMat with 2-year expiration)
  MANDATORY_ORG // Organization-defined mandatory training (custom expiration)
  VOLUNTARY // Voluntary training logs (optional expiration)
}

model mvr_issue {
  id              String            @id @default(cuid())
  issueId         String            @unique
  state           String // VARCHAR(2)
  violationsCount Int               @default(0)
  cleanRecord     Boolean           @default(true)
  notes           String?
  type            MvrType?
  result          MvrResult?
  result_dach     MvrResultDach?
  result_status   MvrResultStatus?
  reviewedBy      Json?
  certification   MvrCertification?
  status          MvrStatus?
  startDate       DateTime? // When MVR period started
  expirationDate  DateTime? // When MVR expires (typically 1 year from start)
  renewalDate     DateTime? // When MVR was renewed/processed
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model physical_issue {
  id                String          @id @default(cuid())
  issueId           String          @unique
  type              PhysicalType?
  medicalExaminer   String? // VARCHAR(255)
  selfCertified     Boolean         @default(false)
  nationalRegistry  Boolean         @default(false)
  result            PhysicalResult? // Medical result that determines expiration period
  status            PhysicalStatus  @default(Qualified)
  startDate         DateTime? // When physical exam was performed
  expirationDate    DateTime? // Auto-calculated from startDate + result (except when Disqualified)
  outOfServiceDate  DateTime? // When driver was disqualified (if result = Disqualified)
  backInServiceDate DateTime? // When driver was re-qualified after disqualification
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model drugalcohol_issue {
  id             String             @id @default(cuid())
  issueId        String             @unique
  result         DrugAlcoholResult? // Test result
  substance      String? // Substance tested for (VARCHAR(50))
  lab            String? // Testing laboratory (VARCHAR(255))
  accreditedBy   String? // Accrediting body (VARCHAR(100))
  notes          String? // Additional notes about the test
  reason         DrugAlcoholReason? // Reason for test
  agency         DrugAlcoholAgency? // Testing agency
  specimenNumber String? // Number specimen (renamed from number_specimen)
  isDrug         Boolean            @default(false) // is_drug
  isAlcohol      Boolean            @default(false) // is_alcohol
  clinic         Json? // Clinic information (JSON)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model license_issue {
  id             String    @id @default(cuid())
  issueId        String    @unique
  licenseType    String
  licenseState   String
  licenseNumber  String
  certification  String
  startDate      DateTime?
  expirationDate DateTime
  renewalDate    DateTime?
  endorsements   Json?
  restrictions   Json?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model registration_issue {
  id             String             @id @default(cuid())
  issueId        String             @unique
  plateNumber    String // License plate number
  state          String // State of registration (2 character)
  startDate      DateTime // Registration start date
  expirationDate DateTime // Registration expiration date (1 year after start)
  renewalDate    DateTime? // Date registration was renewed before expiration
  status         RegistrationStatus @default(Active) // Active, Expired
  notes          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

enum RegistrationStatus {
  Active
  Expired
}

model annual_inspection_issue {
  id             String                  @id @default(cuid())
  issueId        String                  @unique
  inspectorName  String                  // Inspector name (text input for now, will be selector later)
  inspectionDate DateTime                // Date of inspection (start date)
  expirationDate DateTime                // Expiration date (1 year after inspection)
  result         AnnualInspectionResult  @default(Pass) // Temporarily use Pass as default
  status         AnnualInspectionStatus  @default(Active) // Temporarily use Active as default
  notes          String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

enum AnnualInspectionResult {
  Pending
  Pass
  Fail
}

enum AnnualInspectionStatus {
  Scheduled
  Active
  Inactive
}

model training_issue {
  id                     String           @id @default(cuid())
  issueId                String           @unique
  trainingType           String // HazMat Annual, Defensive Driving, etc.
  category               TrainingCategory @default(VOLUNTARY) // DOT mandatory, org mandatory, or voluntary
  provider               String? // Training company/organization
  instructor             String? // Instructor name
  location               String? // Training location
  startDate              DateTime? // When training period started
  completionDate         DateTime // When training was completed
  expirationDate         DateTime? // When training expires (null for voluntary with no expiration)
  expirationPeriodMonths Int? // Custom expiration period for org-defined training
  certificateNumber      String? // Certificate/completion number
  hours                  Float? // Training hours completed
  isRequired             Boolean          @default(false) // Required vs voluntary (kept for backward compatibility)
  competencies           Json? // Skills/topics covered
  notes                  String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

// COMPREHENSIVE MAINTENANCE MANAGEMENT SYSTEM
// Handles routine maintenance, A&B schedules, corrective actions, and ELD integration ready

model maintenance_issue {
  id                String                  @id @default(cuid())
  issueId           String                  @unique
  
  // Maintenance Classification & Source
  maintenanceType   MaintenanceType         // A_SCHEDULE, B_SCHEDULE, CORRECTIVE, REPAIR, PREVENTIVE
  sourceType        MaintenanceSourceType   // ANNUAL_INSPECTION, ROADSIDE_INSPECTION, ROUTINE, ACCIDENT, OTHER
  sourceId          String?                 // ID of triggering inspection/accident if applicable
  
  // Scheduling & Intervals (A&B Schedule Integration)
  dueDate           DateTime                // When maintenance is due
  completedDate     DateTime?               // When maintenance was completed
  scheduledDate     DateTime?               // When maintenance is scheduled
  intervalDays      Int?                    // Days between maintenance (from A&B schedule)
  intervalMiles     Int?                    // Miles between maintenance (from A&B schedule)
  
  // A&B Schedule Reference
  abScheduleItemId  String?                 // Links to specific A&B schedule item
  abScheduleCode    String?                 // Code from A&B schedule (e.g., "A1", "B3")
  
  // Current Metrics (ELD Integration Ready)
  currentMileage    Int?                    // Current odometer reading
  mileageAtDue      Int?                    // Mileage when maintenance is due
  lastServiceDate   DateTime?               // Date of last service for this type
  lastServiceMiles  Int?                    // Mileage at last service
  
  // Inspector/Technician Information
  technicianName    String?                 // Service technician name
  technicianCert    String?                 // Technician certification number
  facilityName      String?                 // Service facility name
  facilityAddress   String?                 // Service facility address
  
  // Maintenance Details & Results
  workDescription   String                  // Description of work performed/needed
  partsUsed         Json?                   // Array of parts used in service
  laborHours        Float?                  // Labor hours for maintenance
  
  // Status & Results
  status            MaintenanceStatus       @default(SCHEDULED) // SCHEDULED, IN_PROGRESS, COMPLETED, OVERDUE, CANCELLED
  result            MaintenanceResult?      // COMPLETED, PARTIAL, FAILED, DEFERRED
  priority          MaintenancePriority     @default(ROUTINE) // CRITICAL, HIGH, ROUTINE, PREVENTIVE
  
  // Compliance & Documentation
  dotCompliant      Boolean                 @default(true) // Whether maintenance meets DOT requirements
  warrantyWork      Boolean                 @default(false) // Whether covered under warranty
  costEstimate      Float?                  // Estimated cost
  actualCost        Float?                  // Actual cost
  
  // Defects & Corrective Actions
  defectsFound      Json?                   // Array of defects discovered
  correctiveActions Json?                   // Array of corrective actions taken
  followUpRequired  Boolean                 @default(false) // Whether follow-up maintenance needed
  followUpDate      DateTime?               // When follow-up is due
  
  // Additional Information
  notes             String?                 // Additional notes
  reminderSent      Boolean                 @default(false) // Whether reminder was sent
  reminderDate      DateTime?               // When reminder was sent
  
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  
  // Relations
  issue             issue                   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  abScheduleItem    equipment_ab_schedule?  @relation(fields: [abScheduleItemId], references: [id])
  corrective_action_form corrective_action_form? @relation(fields: [cafId], references: [id]) // Link back to originating CAF
  
  // CAF Integration (maintenance issues can be created from CAFs)
  cafId             String?                 // Links to CAF that triggered this maintenance work
}

// A&B MAINTENANCE SCHEDULE TEMPLATES
// Defines standard maintenance intervals for Power Units and Trailers
// Organizations can customize these in preferences

model equipment_ab_schedule {
  id                String                  @id @default(cuid())
  organizationId    String?                 // NULL for default templates, org-specific for customized
  
  // Equipment Classification
  equipmentCategory String                  // "POWER" or "TRAILER" 
  vehicleTypeId     String?                 // Specific vehicle type (optional)
  
  // Schedule Classification
  scheduleType      String                  // "A" or "B"
  itemCode          String                  // "A1", "A2", "B1", etc.
  itemDescription   String                  // Description of maintenance task
  
  // Interval Settings (Dual: Time AND Mileage)
  intervalDays      Int?                    // Days between service (e.g., 90, 180)
  intervalMiles     Int?                    // Miles between service (e.g., 25000, 50000)
  intervalType      MaintenanceInterval     // TIME_BASED, MILEAGE_BASED, DUAL_TRIGGER
  
  // Maintenance Details
  category          String                  // "ENGINE", "TRANSMISSION", "BRAKES", "TIRES", etc.
  component         String                  // Specific component (e.g., "Oil Filter", "Brake Pads")
  taskType          String                  // "INSPECT", "REPLACE", "SERVICE", "LUBRICATE"
  estimatedHours    Float?                  // Estimated labor hours
  estimatedCost     Float?                  // Estimated cost
  
  // Compliance & Priority
  dotRequired       Boolean                 @default(false) // DOT mandated maintenance
  priority          MaintenancePriority     @default(ROUTINE)
  safetyRelated     Boolean                 @default(false) // Safety-critical component
  
  // Ordering & Status
  sortOrder         Int                     @default(0) // For display ordering
  isActive          Boolean                 @default(true)
  isDefault         Boolean                 @default(false) // System default vs custom
  
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  
  // Relations
  organization      organization?           @relation(fields: [organizationId], references: [id])
  maintenanceIssues maintenance_issue[]     // Maintenance issues generated from this schedule
  
  @@index([organizationId, equipmentCategory, scheduleType])
  @@index([equipmentCategory, isDefault, isActive])
}

// MAINTENANCE ENUMS

enum MaintenanceType {
  A_SCHEDULE        // A Schedule maintenance (frequent, basic)
  B_SCHEDULE        // B Schedule maintenance (less frequent, comprehensive)
  CORRECTIVE        // Corrective maintenance from inspections
  REPAIR            // Breakdown/failure repair
  PREVENTIVE        // Additional preventive maintenance
  WARRANTY          // Warranty work
  RECALL            // Manufacturer recall
  UPGRADE           // Equipment upgrades/modifications
}

enum MaintenanceSourceType {
  ANNUAL_INSPECTION    // Triggered by annual inspection defects
  ROADSIDE_INSPECTION  // Triggered by roadside inspection violations
  ROUTINE             // Regular A&B schedule maintenance
  ACCIDENT            // Post-accident repairs
  BREAKDOWN           // Equipment failure
  DRIVER_REPORT       // Driver-reported issues (DVIR)
  PREVENTIVE          // Proactive maintenance
  WARRANTY            // Warranty-related work
  RECALL              // Manufacturer recall
  OTHER               // Other sources
}

enum MaintenanceStatus {
  SCHEDULED           // Maintenance is scheduled
  OVERDUE             // Maintenance is past due
  IN_PROGRESS         // Currently being performed
  COMPLETED           // Successfully completed
  PARTIAL             // Partially completed (needs follow-up)
  DEFERRED            // Deferred to later date
  CANCELLED           // Cancelled/not needed
  ON_HOLD             // Temporarily on hold
}

enum MaintenanceResult {
  COMPLETED           // All work completed successfully
  PARTIAL             // Some work completed, more needed
  FAILED              // Maintenance failed or couldn't be completed
  DEFERRED            // Deferred to later date
  NO_WORK_NEEDED      // Inspection showed no work needed
  REFERRED            // Referred to specialist/other facility
}

enum MaintenancePriority {
  CRITICAL            // Critical/safety issues - immediate attention
  HIGH                // High priority - schedule ASAP
  ROUTINE             // Standard routine maintenance
  PREVENTIVE          // Preventive/proactive maintenance
  OPTIONAL            // Optional improvements/upgrades
}

enum MaintenanceInterval {
  TIME_BASED          // Based on calendar time only
  MILEAGE_BASED       // Based on mileage/usage only
  DUAL_TRIGGER        // Whichever comes first (time OR mileage)
  DUAL_REQUIRED       // Both conditions must be met
}

// ENHANCED ACTIVITY LOG SYSTEM - Multi-tag, Multi-entity support
model activity_log {
  id String @id @default(cuid())

  // Entity relationships (flexible - can link to any entity)
  issueId        String? // Links to any compliance issue
  organizationId String? // Links to organization  
  personId       String? // Links to driver/staff
  equipmentId    String? // Links to equipment
  locationId     String? // Links to location
  cafId          String? // Links to CAF

  // Activity content
  activityType String // 'note', 'communication', 'url', 'credential', 'attachment', 'task'
  title        String // Brief title/subject
  content      String // Main content (note text, URL, phone notes, etc.)

  // File attachment data (for activityType = 'attachment')
  fileName String? // Original filename (if file attachment)
  fileType String? // MIME type
  fileSize Int? // File size in bytes  
  filePath String? // Storage path/URL

  // Credential data (for activityType = 'credential') - encrypted
  username  String? // Portal username
  password  String? // Encrypted password
  portalUrl String? // Portal/site URL

  // Task data (for activityType = 'task')
  dueDate     DateTime? // Task due date
  isCompleted Boolean   @default(false)
  priority    String? // 'low', 'medium', 'high', 'urgent'

  // Multi-tag system
  tags String[] // Array of tags: ['communication', 'phone', 'urgent', 'follow-up']

  // System fields
  createdBy String // User ID who created
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  issue        issue?                  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  organization organization?           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  person       person?                 @relation(fields: [personId], references: [id], onDelete: Cascade)
  equipment    equipment?              @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  location     location?               @relation(fields: [locationId], references: [id], onDelete: Cascade)
  caf          corrective_action_form? @relation("CAFActivityLogs", fields: [cafId], references: [id], onDelete: Cascade)
}

// New unified Action system with subtypes (storage vs time‑based)
model action_item {
  id             String   @id @default(cuid())

  // Entity relationships (flexible)
  issueId        String?
  organizationId String?
  personId       String?
  equipmentId    String?
  locationId     String?
  cafId          String?

  // Common fields
  actionType   String   // 'note' | 'attachment' | 'url' | 'credential' | 'task' | 'communication'
  title        String
  description  String?
  tags         String[]
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations to core entities
  issue        issue?                  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  organization organization?           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  person       person?                 @relation(fields: [personId], references: [id], onDelete: Cascade)
  equipment    equipment?              @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  location     location?               @relation(fields: [locationId], references: [id], onDelete: Cascade)
  caf          corrective_action_form? @relation(fields: [cafId], references: [id], onDelete: Cascade)

  // Subtype relations (1:1)
  note        action_note?
  attachment  action_attachment?
  url         action_url?
  credential  action_credential?
  task        action_task?

  @@index([issueId])
  @@index([organizationId])
  @@index([personId])
  @@index([equipmentId])
  @@index([locationId])
  @@index([cafId])
  @@index([actionType, createdAt])
}

model action_note {
  actionId String @id
  content  String

  action action_item @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model action_attachment {
  actionId   String @id
  storageKey String  // S3/Spaces key or local path
  fileName   String
  mimeType   String
  fileSize   Int
  checksum   String? // optional integrity check
  width      Int?
  height     Int?

  action action_item @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model action_url {
  actionId String @id
  url      String

  action action_item @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model action_credential {
  actionId String @id
  url      String?
  username String?
  password String? // encrypted

  action action_item @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model action_task {
  actionId       String   @id
  dueAt          DateTime?
  assignedToUser String?
  status         String   @default("pending") // pending, in_progress, completed, cancelled
  priority       String   @default("medium")  // low, medium, high, urgent
  completedAt    DateTime?

  action action_item @relation(fields: [actionId], references: [id], onDelete: Cascade)
  @@index([status, dueAt])
}

// Organization-specific tag management for future customization
model organization_tag {
  id             String   @id @default(cuid())
  organizationId String
  tagName        String // Custom tag name
  tagColor       String? // Hex color for UI
  tagIcon        String? // Icon identifier
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())

  organization organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, tagName]) // Prevent duplicate tags per org
}

// LEGACY: Keep existing attachment model for backwards compatibility
model attachment {
  id             String   @id @default(cuid())
  issueId        String? // Links to any issue (license, inspection, etc.) - now optional
  cafId          String? // Links to CAF - new for Phase 2
  fileName       String // Original filename
  fileType       String // MIME type (image/jpeg, application/pdf, etc.)
  fileSize       Int // File size in bytes
  filePath       String // Storage path/URL (empty for notes)
  attachmentType String // 'license_front', 'license_back', 'note', 'endorsement_doc', 'caf_evidence', etc.
  description    String? // Optional description
  noteContent    String? // For text-based addons (notes)
  uploadedBy     String // User ID who uploaded
  createdAt      DateTime @default(now())

  // Relationships
  issue                  issue?                  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  corrective_action_form corrective_action_form? @relation("CAFAttachments", fields: [cafId], references: [id], onDelete: Cascade)
}

model location {
  id             String   @id
  partyId        String?  @unique // NEW: Makes location a party entity
  organizationId String // Keep for backward compatibility during transition
  name           String
  locationType   String // terminal, yard, office, warehouse
  address        String
  city           String
  state          String
  zipCode        String
  phone          String?
  email          String?
  isMainLocation Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  activity_logs activity_log[] // Enhanced activity tracking for locations
  action_items  action_item[]
  party         party?         @relation(fields: [partyId], references: [id], onDelete: Cascade)
  organization  organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  equipment     equipment[]
  role          role[] // Staff and drivers assigned to this location
}

model organization {
  id                      String                   @id
  partyId                 String                   @unique
  name                    String
  dotNumber               String?                  @unique
  einNumber               String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  phone                   String?
  consultation            consultation[]
  location                location[]
  corrective_action_forms corrective_action_form[] // CAF system support
  activity_logs           activity_log[] // Enhanced activity tracking
  // Contacts
  contact_methods         contact_method[]
  contact_addresses       contact_address[]
  organization_tags       organization_tag[] // Custom tag management
  // Back-reference for actions
  action_items            action_item[]

  // Equipment enum management - organizations can customize their equipment options
  equipmentStatuses       EquipmentStatus[]
  equipmentFuelTypes      EquipmentFuelType[]
  equipmentVehicleTypes   EquipmentVehicleType[]
  equipmentColors         EquipmentColor[]
  equipmentOwnershipTypes EquipmentOwnershipType[]
  equipmentCategories     EquipmentCategory[]
  
  // A&B Maintenance Schedule management - organizations can customize maintenance intervals
  abScheduleItems         equipment_ab_schedule[] // Custom A&B maintenance schedules

  party party @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model party {
  id           String        @id
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       String        @default("active")
  userId       String?
  consultant   consultant?
  equipment    equipment?
  issue        issue[]
  organization organization?
  location     location? // NEW: Location can be a party
  person       person?
  role         role[]
  staff        staff? // CAF system support
}

model person {
  id            String         @id
  partyId       String         @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime?
  licenseNumber String?        @unique
  phone         String?
  email         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  activity_logs     activity_log[] // Enhanced activity tracking for drivers/staff
  action_items      action_item[]
  // Contacts
  contact_methods   contact_method[]
  contact_addresses contact_address[]
  party         party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model role {
  id             String    @id
  partyId        String
  roleType       String
  organizationId String?
  locationId     String? // Role can be assigned to specific location
  status         String    @default("pending")
  startDate      DateTime  @default(now())
  endDate        DateTime?
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  consultationId String?
  party          party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
  location       location? @relation(fields: [locationId], references: [id])
  // Contacts scoped to a specific assignment (work methods for a person at an org)
  contact_methods   contact_method[]
  contact_addresses contact_address[]
}

// =============================
// Contacts System (Partners/Staff)
// =============================

enum ContactMethodType {
  PHONE
  EMAIL
  SOCIAL
  WEBSITE
}

enum ContactScope {
  WORK
  PERSONAL
}

enum AddressType {
  PHYSICAL
  MAILING
  BILLING
}

model contact_method {
  id              String             @id @default(cuid())
  // Owner (exactly one should be set by application logic)
  organizationId  String?
  personId        String?
  roleId          String?

  type            ContactMethodType
  scope           ContactScope       @default(WORK)
  label           String?            // e.g., Main, Billing, Cell
  value           String             // normalized value (E.164 phone, lowercase email)
  isPrimary       Boolean            @default(false)
  isVerified      Boolean            @default(false)
  notes           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  organization    organization?      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  person          person?            @relation(fields: [personId], references: [id], onDelete: Cascade)
  role            role?              @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([personId])
  @@index([roleId])
  @@index([type])
}

model contact_address {
  id              String        @id @default(cuid())
  // Owner (exactly one should be set by application logic)
  organizationId  String?
  personId        String?
  roleId          String?

  scope           ContactScope  @default(WORK)
  addressType     AddressType   @default(PHYSICAL)
  label           String?       // e.g., Main Office, Billing Dept
  line1           String
  line2           String?
  city            String
  state           String
  postalCode      String
  country         String        @default("US")
  isPrimary       Boolean       @default(false)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  organization    organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  person          person?       @relation(fields: [personId], references: [id], onDelete: Cascade)
  role            role?         @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([personId])
  @@index([roleId])
}

enum RinsLevel {
  Level_I
  Level_II
  Level_III
  Level_IV
  Level_V
  Level_VI
}

enum RinsResult {
  Pass
  Warning
  Out_Of_Service
}

enum DvirSource {
  Driver_Reported
  FMCSA_Portal_Check
  Third_Party_Report
}

enum EntryMethod {
  Manual_Entry
  OCR_Upload
  API_Import
}

enum ViolationType {
  Company
  Driver_Qualification
  Driver_Performance
  Equipment
}

enum ViolationSeverity {
  Warning
  Citation
  Out_Of_Service
}

// Roadside inspection models have been replaced by the unified incident system above

// FMCSA Violation Codes Database (Real-time updated from FMCSA data)
model violation_code {
  id            String @id @default(cuid())
  code          String @unique // "396.17CPI", "392.2SLLSR"
  description   String // Full violation description
  violationType String // "Vehicle", "Driver", "Other" (from FMCSA)

  // FMCSA Statistics (from monthly snapshots)
  totalInspections Int? // # of Inspections
  totalViolations  Int? // # of Violations  
  percentOfTotal   Float? // % of Total Violations
  oosViolations    Int? // # of OOS Violations
  oosPercent       Float? // %OOS Percent

  // Derived compliance intelligence
  riskScore  Float? // Calculated risk assessment
  isHighRisk Boolean @default(false) // Based on OOS % thresholds
  isCritical Boolean @default(false) // High OOS or severity

  // CFR categorization (parsed from code)
  cfrPart    Int? // 390, 391, 392, 393, etc.
  cfrSection String? // Full section reference

  // Data management
  effectiveDate DateTime  @default(now())
  retiredAt     DateTime? // NULL = still active
  lastUpdated   DateTime  @updatedAt
  dataSource    String    @default("FMCSA_CSV") // Track source

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations to existing violations (unified)
  incident_violations incident_violation[] // Link to actual violations
}

// violation_snapshot table removed - not being used in the application

// CAF System - Phase 2 Implementation
model staff {
  id             String  @id @default(cuid())
  partyId        String  @unique
  employeeId     String? // Company employee ID
  position       String? // Job title/position
  department     String? // Department/division
  supervisorId   String? // FK to supervisor staff record
  isActive       Boolean @default(true)
  canApproveCAFs Boolean @default(false)
  canSignCAFs    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  party         party                    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  supervisor    staff?                   @relation("StaffSupervisor", fields: [supervisorId], references: [id])
  subordinates  staff[]                  @relation("StaffSupervisor")
  assigned_cafs corrective_action_form[] @relation("AssignedStaff")
  created_cafs  corrective_action_form[] @relation("CreatedByStaff")
  approved_cafs corrective_action_form[] @relation("ApprovedByStaff") // CAFs this staff has approved
  signatures    caf_signature[]
  
  // Supervisor Assignment Relationships (for automatic CAF assignment)
  supervised_drivers    Json? // Array of driver party IDs this staff supervises
  maintained_equipment  Json? // Array of equipment party IDs this staff maintains
  
  // CAF Assignment Preferences
  autoAssignDriverCAFs    Boolean @default(false) // Auto-assign driver violation CAFs to this staff
  autoAssignEquipmentCAFs Boolean @default(false) // Auto-assign equipment violation CAFs to this staff  
  autoAssignCompanyCAFs   Boolean @default(false) // Auto-assign company violation CAFs to this staff
}

model corrective_action_form {
  id                  String  @id @default(cuid())
  cafNumber           String  @unique // Auto-generated CAF-YYYY-NNNN
  incidentViolationId String? // FK to unified incident violation (deprecated - use incidentId + violationType)
  
  // Enhanced Incident Linking (supports multiple violations per CAF)
  incidentId          String? // FK to incident (RINS)
  violationType       ViolationType? // DRIVER, EQUIPMENT, COMPANY - groups violations
  violationCodes      Json? // Array of violation codes included in this CAF
  violationSummary    String? // Human-readable summary of violations

  // Versioning and Lifecycle Management  
  version             Int     @default(1) // Version number for CAF revisions
  parentCafId         String? // Links to original CAF if this is a revision
  cancelReason        String? // Why this CAF was cancelled/superseded
  isActive            Boolean @default(true) // Only latest version should be active

  // Basic Information
  title             String // "Driver Performance - 392.2A(1)"
  description       String // Detailed description of required action
  correctiveActions String? // Manual entry of specific corrective actions required
  notes             String? // Additional notes or special instructions
  priority          CafPriority @default(MEDIUM)
  category          CafCategory // DRIVER_PERFORMANCE, EQUIPMENT_MAINTENANCE, etc.

  // Assignment
  assignedStaffId String // FK to responsible staff member
  assignedBy      String? // FK to staff who assigned (optional for Master users)
  organizationId  String // FK to organization
  dueDate         DateTime? // When CAF must be completed

  // Status and Completion
  status          CafStatus @default(ASSIGNED)
  completionNotes String? // Staff notes on completion
  completedAt     DateTime? // When marked complete

  // Approval and Signatures
  requiresApproval Boolean   @default(true)
  approvedAt       DateTime? // When approved
  approvedBy       String? // FK to approving staff

  // Maintenance Integration (for Equipment CAFs)
  maintenanceIssueId String? // Link to resulting maintenance work order
  requiresMaintenance Boolean @default(false) // Whether this CAF requires actual maintenance work

  // PDF and Document Management
  pdfGenerated     Boolean   @default(false) // Whether PDF has been generated
  pdfUrl           String? // URL to generated PDF
  returnedPdfUrl   String? // URL to returned/completed PDF from staff

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  incident_violation incident_violation? @relation(fields: [incidentViolationId], references: [id])
  incident           incident?           @relation(fields: [incidentId], references: [id]) // New relation to incident
  parent_caf         corrective_action_form? @relation("CAFVersions", fields: [parentCafId], references: [id])
  child_cafs         corrective_action_form[] @relation("CAFVersions") // Revision history
  assigned_staff     staff               @relation("AssignedStaff", fields: [assignedStaffId], references: [id])
  created_by_staff   staff?              @relation("CreatedByStaff", fields: [assignedBy], references: [id])
  approved_by_staff  staff?              @relation("ApprovedByStaff", fields: [approvedBy], references: [id])
  organization       organization        @relation(fields: [organizationId], references: [id])
  maintenance_issues maintenance_issue[] // One CAF can create multiple maintenance issues
  signatures         caf_signature[]
  attachments        attachment[]        @relation("CAFAttachments")
  activity_logs      activity_log[]      @relation("CAFActivityLogs") // Enhanced activity tracking for CAFs
  action_items       action_item[]
}

model caf_signature {
  id               String        @id @default(cuid())
  cafId            String // FK to corrective_action_form
  staffId          String // FK to staff member who signed
  signatureType    SignatureType // COMPLETION, APPROVAL, WITNESS
  signedAt         DateTime      @default(now())
  digitalSignature String? // Encrypted signature data
  ipAddress        String? // IP where signature was made
  notes            String? // Optional signature notes

  // Relations
  corrective_action_form corrective_action_form @relation(fields: [cafId], references: [id], onDelete: Cascade)
  staff                  staff                  @relation(fields: [staffId], references: [id])

  @@unique([cafId, staffId, signatureType]) // Prevent duplicate signatures
}

// Enums for CAF System
enum CafPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CafCategory {
  DRIVER_PERFORMANCE // 391.x, 392.x violations
  DRIVER_QUALIFICATION // 391.x violations
  EQUIPMENT_MAINTENANCE // 393.x, 396.x violations
  COMPANY_OPERATIONS // 390.x violations
  SAFETY_MANAGEMENT // General safety issues
  OTHER // Miscellaneous
}

enum CafStatus {
  ASSIGNED // CAF assigned to staff
  IN_PROGRESS // Work has begun
  COMPLETED // Work complete, awaiting approval
  APPROVED // Approved and closed
  REJECTED // Rejected, needs rework
  CANCELLED // CAF cancelled
}

enum SignatureType {
  COMPLETION // Staff completing the CAF
  APPROVAL // Supervisor approving completion
  WITNESS // Witness to completion (if required)
}

// Equipment-related lookup tables for dynamic enum management
model EquipmentStatus {
  id          String   @id @default(cuid())
  code        String // ACTIVE, INACTIVE, MAINTENANCE, RETIRED
  label       String
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Organization that manages this option (null = system default)
  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])

  // Usage tracking
  equipment equipment[]

  @@unique([code, organizationId])
  @@map("equipment_status")
}

model EquipmentFuelType {
  id          String   @id @default(cuid())
  code        String // Gasoline, Diesel, Propane, Electric
  label       String
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])

  equipment equipment[]

  @@unique([code, organizationId])
  @@map("equipment_fuel_type")
}

model EquipmentVehicleType {
  id          String   @id @default(cuid())
  code        String // PDC-Day Cab, PSC-Sleeper Cab, etc.
  label       String
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])

  equipment equipment[]

  @@unique([code, organizationId])
  @@map("equipment_vehicle_type")
}

model EquipmentColor {
  id          String   @id @default(cuid())
  code        String // White, Black, Red, etc.
  label       String
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])

  equipment equipment[]

  @@unique([code, organizationId])
  @@map("equipment_color")
}

model EquipmentOwnershipType {
  id          String   @id @default(cuid())
  code        String // Owner Operator, Leased, Owned, Rent
  label       String
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])

  equipment equipment[]

  @@unique([code, organizationId])
  @@map("equipment_ownership_type")
}

model EquipmentCategory {
  id          String   @id @default(cuid())
  code        String // Power, Trailer
  label       String
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])

  equipment equipment[]

  @@unique([code, organizationId])
  @@map("equipment_category")
}
