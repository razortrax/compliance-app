generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// UNIFIED INCIDENT MANAGEMENT SYSTEM
// Replaces: accident_issue + roadside_inspection_issue  
// ===========================================

// Base incident model for both accidents and roadside inspections
model incident {
  id          String      @id @default(cuid())
  issueId     String      @unique
  incidentType IncidentType // ACCIDENT | ROADSIDE_INSPECTION

  // Common timing information
  incidentDate DateTime // Date of incident/inspection
  incidentTime String?  // Time of incident/inspection

  // Common officer/inspector information  
  officerName    String  // Inspector name or responding officer
  agencyName     String? // Agency name
  officerBadge   String? // Badge number (RSIN) or officer ID
  reportNumber   String? // Report/inspection number

  // Common location information
  locationAddress String? // Location address
  locationCity    String? // Location city  
  locationState   String? // Location state
  locationZip     String? // Location zip

  // Incident-specific data (JSON for flexibility)
  accidentData Json? // Accident-specific fields
  roadsideData Json? // RSIN-specific fields

  // Common relationships
  equipment  incident_equipment_involvement[]
  violations incident_violation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

// Unified equipment involvement (replaces both models)
model incident_equipment_involvement {
  id          String  @id @default(cuid())
  incidentId  String  // FK to incident
  unitNumber  Int     // 1, 2, or 3
  
  // Equipment identification
  equipmentId String? // Optional link to equipment table
  unitType    String? // TT, TLR, etc. (RSIN) or vehicle type (Accident)
  make        String?
  model       String?
  year        Int?
  plateNumber String?
  plateState  String? // RSIN specific
  vin         String?
  
  // RSIN-specific fields (in JSON for accidents)
  cvsaSticker String? // RSIN only
  oosSticker  String? // RSIN only

  createdAt DateTime @default(now())

  // Relations
  incident  incident   @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  equipment equipment? @relation(fields: [equipmentId], references: [id])
}

// Unified violation system (replaces both models)
model incident_violation {
  id                String             @id @default(cuid())
  incidentId        String             // FK to incident
  violationCode     String             // 392.2A(1) or citation code
  section           String?            // Full section reference
  unitNumber        Int?               // Which equipment unit (1,2,3) or null for driver
  outOfService      Boolean            @default(false)
  outOfServiceDate  DateTime?          // When placed out of service
  backInServiceDate DateTime?          // When returned to service
  citationNumber    String?
  severity          ViolationSeverity?
  description       String             // Description of violation
  inspectorComments String?            // Officer/inspector comments

  // Assignment fields (existing)
  violationType   ViolationType? // Driver, Equipment, Company
  assignedPartyId String?        // FK to responsible party

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  incident                incident                 @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  corrective_action_forms corrective_action_form[]
  violation_code_ref      violation_code?          @relation(fields: [violationCode], references: [code])
}

// New enum for incident types
enum IncidentType {
  ACCIDENT            // Motor vehicle accidents
  ROADSIDE_INSPECTION // DOT roadside inspections  
}

model consultant {
  id              String         @id
  partyId         String         @unique
  licenseNumber   String?
  specializations String[]
  yearsExperience Int?
  hourlyRate      Decimal?
  bio             String?
  isActive        Boolean        @default(true)
  isVerified      Boolean        @default(false)
  party           party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
  consultation    consultation[]
}

model consultant_access_log {
  id                   String               @id
  consentId            String
  accessedAt           DateTime             @default(now())
  action               String
  resourceType         String
  resourceId           String?
  details              String?
  ipAddress            String?
  userAgent            String?
  data_sharing_consent data_sharing_consent @relation(fields: [consentId], references: [id], onDelete: Cascade)
}

model consultation {
  id                   String                @id
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  clientOrgId          String
  consultantId         String
  title                String
  description          String?
  consultationType     String
  status               String                @default("REQUESTED")
  urgency              String                @default("NORMAL")
  requestedAt          DateTime              @default(now())
  acceptedAt           DateTime?
  startDate            DateTime?
  endDate              DateTime?
  dataAccessExpiry     DateTime?
  agreedRate           Decimal?
  estimatedHours       Int?
  actualHours          Decimal?
  organization         organization          @relation(fields: [clientOrgId], references: [id])
  consultant           consultant            @relation(fields: [consultantId], references: [id])
  data_sharing_consent data_sharing_consent?
}

model data_sharing_consent {
  id                    String                  @id
  consultationId        String                  @unique
  consentGivenAt        DateTime                @default(now())
  consentGivenBy        String
  isActive              Boolean                 @default(true)
  revokedAt             DateTime?
  revokedBy             String?
  scopePermissions      Json
  consultant_access_log consultant_access_log[]
  consultation          consultation            @relation(fields: [consultationId], references: [id], onDelete: Cascade)
}

model equipment {
  id                 String         @id
  partyId            String         @unique
  
  // Basic equipment information
  make               String?
  model              String?
  year               Int?
  vin                String?        @unique // Changed from vinNumber to match CSV
  plateNumber        String?
  registrationExpiry DateTime?
  
  // Status and classification
  statusId           String?
  status             EquipmentStatus? @relation(fields: [statusId], references: [id])
  
  // Weight specifications
  eqpWeightGross        Int?
  eqpWeightGrossRating  Int?
  eqpWeightGrossTagged  Int?
  
  // Fuel and engine information
  fuelTypeId         String?
  fuelType           EquipmentFuelType? @relation(fields: [fuelTypeId], references: [id])
  engineModel        String?
  engineDisplacement String?
  driveType          String?
  dateOfManufacture  DateTime?
  countCylinders     Int?
  
  // Physical characteristics
  countAxles         Int?
  colorId            String?
  color              EquipmentColor? @relation(fields: [colorId], references: [id])
  tireSize           String?
  
  // Usage tracking
  startMileage       Int?
  startDate          DateTime?
  retireMileage      Int?
  retireDate         DateTime?
  
  // Vehicle classification
  vehicleTypeId      String?
  vehicleType        EquipmentVehicleType? @relation(fields: [vehicleTypeId], references: [id])
  
  // Ownership information  
  ownershipTypeId    String?
  ownershipType      EquipmentOwnershipType? @relation(fields: [ownershipTypeId], references: [id])
  
  // Category
  categoryId         String?
  category           EquipmentCategory? @relation(fields: [categoryId], references: [id])
  
  // Location assignment
  locationId         String?        // Equipment can be assigned to specific location
  location           location?      @relation(fields: [locationId], references: [id])
  
  // Relationships
  party              party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
  activity_logs      activity_log[] // Enhanced activity tracking for equipment
  
  // Incident involvement relationships (unified)
  incident_involvement incident_equipment_involvement[]
}

model issue {
  id                        String                     @id
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime
  issueType                 String
  status                    String                     @default("open")
  priority                  String                     @default("medium")
  partyId                   String
  title                     String
  description               String?
  dueDate                   DateTime?
  resolvedAt                DateTime?
  incident                  incident?
  mvr_issue                 mvr_issue?
  physical_issue            physical_issue?
  drugalcohol_issue         drugalcohol_issue?
  party                     party                      @relation(fields: [partyId], references: [id])
  license_issue             license_issue?
  registration_issue        registration_issue?
  training_issue            training_issue?
  attachments               attachment[]               // Issue can have multiple attachments
  activity_logs             activity_log[]             // Enhanced activity tracking for issues
}

enum MvrType {
  PreHire_Check
  Annual_Review
  Drug_Testing_Clearinghouse
  After_Accident
  Reasonable_Suspicion
  Endorsement_Update
  Med_Cert_Update
}

enum MvrResult {
  Pass
  Fail
  Scheduled
  Old_Certificate
  Inactive
}

enum MvrResultDach {
  Pass
  Fail
  Not_Required
}

enum MvrResultStatus {
  Result_Meets
  Result_Does_Not_Meet
  Result_Disqualified
}

enum MvrCertification {
  NonExcepted_Interstate
  Excepted_Interstate
  NonExcepted_Intrastate
  ExceptedIntrastate
  None
}

enum MvrStatus {
  Not_Released
  Active
  Inactive
  Disqualified
  Not_Driver
  One_Time_Training
}

enum PhysicalType {
  Annual
  Bi_Annual
  Return_to_Duty
  Post_Accident
  One_Month
  Three_Month
  Six_Month
  Pre_Hire
  No_Physical_Issue
}

enum PhysicalResult {
  Three_Month
  Six_Month
  One_Year
  Two_Years
  Disqualified
}

enum PhysicalStatus {
  Qualified
  Disqualified
}

enum DrugAlcoholResult {
  Negative
  Positive
  Negative_Dilute
}

enum DrugAlcoholReason {
  PreEmployment
  Random
  Reasonable_Suspicion
  Post_Accident
  Return_to_Duty
  FollowUp
  Other
}

enum DrugAlcoholAgency {
  FMCSA
  PHMSA
  Non_DOT
  Drug_Testing_Clearinghouse
  Water_Tech_Energy
}

enum TrainingCategory {
  MANDATORY_DOT     // DOT required training (e.g., HazMat with 2-year expiration)
  MANDATORY_ORG     // Organization-defined mandatory training (custom expiration)
  VOLUNTARY         // Voluntary training logs (optional expiration)
}

model mvr_issue {
  id              String            @id @default(cuid())
  issueId         String            @unique
  state           String // VARCHAR(2)
  violationsCount Int               @default(0)
  cleanRecord     Boolean           @default(true)
  notes           String?
  type            MvrType?
  result          MvrResult?
  result_dach     MvrResultDach?
  result_status   MvrResultStatus?
  reviewedBy      Json?
  certification   MvrCertification?
  status          MvrStatus?
  startDate       DateTime? // When MVR period started
  expirationDate  DateTime? // When MVR expires (typically 1 year from start)
  renewalDate     DateTime? // When MVR was renewed/processed
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model physical_issue {
  id                 String          @id @default(cuid())
  issueId            String          @unique
  type               PhysicalType?
  medicalExaminer    String? // VARCHAR(255)
  selfCertified      Boolean         @default(false)
  nationalRegistry   Boolean         @default(false)
  result             PhysicalResult? // Medical result that determines expiration period
  status             PhysicalStatus  @default(Qualified)
  startDate          DateTime? // When physical exam was performed
  expirationDate     DateTime? // Auto-calculated from startDate + result (except when Disqualified)
  outOfServiceDate   DateTime? // When driver was disqualified (if result = Disqualified)
  backInServiceDate  DateTime? // When driver was re-qualified after disqualification
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model drugalcohol_issue {
  id             String             @id @default(cuid())
  issueId        String             @unique
  result         DrugAlcoholResult? // Test result
  substance      String? // Substance tested for (VARCHAR(50))
  lab            String? // Testing laboratory (VARCHAR(255))
  accreditedBy   String? // Accrediting body (VARCHAR(100))
  notes          String? // Additional notes about the test
  reason         DrugAlcoholReason? // Reason for test
  agency         DrugAlcoholAgency? // Testing agency
  specimenNumber String? // Number specimen (renamed from number_specimen)
  isDrug         Boolean            @default(false) // is_drug
  isAlcohol      Boolean            @default(false) // is_alcohol
  clinic         Json? // Clinic information (JSON)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model license_issue {
  id             String    @id @default(cuid())
  issueId        String    @unique
  licenseType    String
  licenseState   String
  licenseNumber  String
  certification  String
  startDate      DateTime?
  expirationDate DateTime
  renewalDate    DateTime?
  endorsements   Json?
  restrictions   Json?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model registration_issue {
  id           String              @id @default(cuid())
  issueId      String              @unique
  plateNumber  String              // License plate number
  state        String              // State of registration (2 character)
  startDate    DateTime            // Registration start date
  expirationDate DateTime          // Registration expiration date (1 year after start)
  renewalDate  DateTime?           // Date registration was renewed before expiration
  status       RegistrationStatus  @default(Active) // Active, Expired
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

enum RegistrationStatus {
  Active
  Expired
}

model training_issue {
  id                     String          @id @default(cuid())
  issueId                String          @unique
  trainingType           String          // HazMat Annual, Defensive Driving, etc.
  category               TrainingCategory @default(VOLUNTARY) // DOT mandatory, org mandatory, or voluntary
  provider               String?         // Training company/organization
  instructor             String?         // Instructor name
  location               String?         // Training location
  startDate              DateTime?       // When training period started
  completionDate         DateTime        // When training was completed
  expirationDate         DateTime?       // When training expires (null for voluntary with no expiration)
  expirationPeriodMonths Int?            // Custom expiration period for org-defined training
  certificateNumber      String?         // Certificate/completion number
  hours                  Float?          // Training hours completed
  isRequired             Boolean         @default(false) // Required vs voluntary (kept for backward compatibility)
  competencies           Json?           // Skills/topics covered
  notes                  String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  // Relations
  issue issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

// ENHANCED ACTIVITY LOG SYSTEM - Multi-tag, Multi-entity support
model activity_log {
  id          String   @id @default(cuid())
  
  // Entity relationships (flexible - can link to any entity)
  issueId        String? // Links to any compliance issue
  organizationId String? // Links to organization  
  personId       String? // Links to driver/staff
  equipmentId    String? // Links to equipment
  locationId     String? // Links to location
  cafId          String? // Links to CAF
  
  // Activity content
  activityType String // 'note', 'communication', 'url', 'credential', 'attachment', 'task'
  title        String // Brief title/subject
  content      String // Main content (note text, URL, phone notes, etc.)
  
  // File attachment data (for activityType = 'attachment')
  fileName     String? // Original filename (if file attachment)
  fileType     String? // MIME type
  fileSize     Int?    // File size in bytes  
  filePath     String? // Storage path/URL
  
  // Credential data (for activityType = 'credential') - encrypted
  username     String? // Portal username
  password     String? // Encrypted password
  portalUrl    String? // Portal/site URL
  
  // Task data (for activityType = 'task')
  dueDate      DateTime? // Task due date
  isCompleted  Boolean   @default(false)
  priority     String?   // 'low', 'medium', 'high', 'urgent'
  
  // Multi-tag system
  tags         String[]  // Array of tags: ['communication', 'phone', 'urgent', 'follow-up']
  
  // System fields
  createdBy    String    // User ID who created
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relationships
  issue        issue?        @relation(fields: [issueId], references: [id], onDelete: Cascade)
  organization organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  person       person?       @relation(fields: [personId], references: [id], onDelete: Cascade)
  equipment    equipment?    @relation(fields: [equipmentId], references: [id], onDelete: Cascade) 
  location     location?     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  caf          corrective_action_form? @relation("CAFActivityLogs", fields: [cafId], references: [id], onDelete: Cascade)
}

// Organization-specific tag management for future customization
model organization_tag {
  id             String       @id @default(cuid())
  organizationId String       
  tagName        String       // Custom tag name
  tagColor       String?      // Hex color for UI
  tagIcon        String?      // Icon identifier
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, tagName]) // Prevent duplicate tags per org
}

// LEGACY: Keep existing attachment model for backwards compatibility
model attachment {
  id             String   @id @default(cuid())
  issueId        String? // Links to any issue (license, inspection, etc.) - now optional
  cafId          String? // Links to CAF - new for Phase 2
  fileName       String // Original filename
  fileType       String // MIME type (image/jpeg, application/pdf, etc.)
  fileSize       Int // File size in bytes
  filePath       String // Storage path/URL (empty for notes)
  attachmentType String // 'license_front', 'license_back', 'note', 'endorsement_doc', 'caf_evidence', etc.
  description    String? // Optional description
  noteContent    String? // For text-based addons (notes)
  uploadedBy     String // User ID who uploaded
  createdAt      DateTime @default(now())

  // Relationships
  issue                  issue?                  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  corrective_action_form corrective_action_form? @relation("CAFAttachments", fields: [cafId], references: [id], onDelete: Cascade)
}

model location {
  id             String   @id
  partyId        String?  @unique // NEW: Makes location a party entity
  organizationId String // Keep for backward compatibility during transition
  name           String
  locationType   String // terminal, yard, office, warehouse
  address        String
  city           String
  state          String
  zipCode        String
  phone          String?
  email          String?
  isMainLocation Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  activity_logs activity_log[] // Enhanced activity tracking for locations
  party        party?         @relation(fields: [partyId], references: [id], onDelete: Cascade)
  organization organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  equipment    equipment[]
  role         role[] // Staff and drivers assigned to this location
}

model organization {
  id                      String                   @id
  partyId                 String                   @unique
  name                    String
  dotNumber               String?                  @unique
  einNumber               String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  phone                   String?
  consultation            consultation[]
  location                location[]
  corrective_action_forms corrective_action_form[] // CAF system support
  activity_logs           activity_log[]           // Enhanced activity tracking
  organization_tags       organization_tag[]       // Custom tag management
  
  // Equipment enum management - organizations can customize their equipment options
  equipmentStatuses       EquipmentStatus[]
  equipmentFuelTypes      EquipmentFuelType[]
  equipmentVehicleTypes   EquipmentVehicleType[]
  equipmentColors         EquipmentColor[]
  equipmentOwnershipTypes EquipmentOwnershipType[]
  equipmentCategories     EquipmentCategory[]
  
  party                   party                    @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model party {
  id           String        @id
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       String        @default("active")
  userId       String?
  consultant   consultant?
  equipment    equipment?
  issue        issue[]
  organization organization?
  location     location? // NEW: Location can be a party
  person       person?
  role         role[]
  staff        staff? // CAF system support
}

model person {
  id            String         @id
  partyId       String         @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime?
  licenseNumber String?        @unique
  phone         String?
  email         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  activity_logs activity_log[] // Enhanced activity tracking for drivers/staff
  party         party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model role {
  id             String    @id
  partyId        String
  roleType       String
  organizationId String?
  locationId     String? // Role can be assigned to specific location
  status         String    @default("pending")
  startDate      DateTime  @default(now())
  endDate        DateTime?
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  consultationId String?
  party          party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
  location       location? @relation(fields: [locationId], references: [id])
}

enum RinsLevel {
  Level_I
  Level_II
  Level_III
  Level_IV
  Level_V
  Level_VI
}

enum RinsResult {
  Pass
  Warning
  Out_Of_Service
}

enum DvirSource {
  Driver_Reported
  FMCSA_Portal_Check
  Third_Party_Report
}

enum EntryMethod {
  Manual_Entry
  OCR_Upload
  API_Import
}

enum ViolationType {
  Company
  Driver_Qualification
  Driver_Performance
  Equipment
}

enum ViolationSeverity {
  Warning
  Citation
  Out_Of_Service
}

// Roadside inspection models have been replaced by the unified incident system above

// FMCSA Violation Codes Database (Real-time updated from FMCSA data)
model violation_code {
  id            String @id @default(cuid())
  code          String @unique // "396.17CPI", "392.2SLLSR"
  description   String // Full violation description
  violationType String // "Vehicle", "Driver", "Other" (from FMCSA)

  // FMCSA Statistics (from monthly snapshots)
  totalInspections Int? // # of Inspections
  totalViolations  Int? // # of Violations  
  percentOfTotal   Float? // % of Total Violations
  oosViolations    Int? // # of OOS Violations
  oosPercent       Float? // %OOS Percent

  // Derived compliance intelligence
  riskScore  Float? // Calculated risk assessment
  isHighRisk Boolean @default(false) // Based on OOS % thresholds
  isCritical Boolean @default(false) // High OOS or severity

  // CFR categorization (parsed from code)
  cfrPart    Int? // 390, 391, 392, 393, etc.
  cfrSection String? // Full section reference

  // Data management
  effectiveDate DateTime  @default(now())
  retiredAt     DateTime? // NULL = still active
  lastUpdated   DateTime  @updatedAt
  dataSource    String    @default("FMCSA_CSV") // Track source

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations to existing violations (unified)
  incident_violations incident_violation[] // Link to actual violations
}

// violation_snapshot table removed - not being used in the application

// CAF System - Phase 2 Implementation
model staff {
  id             String  @id @default(cuid())
  partyId        String  @unique
  employeeId     String? // Company employee ID
  position       String? // Job title/position
  department     String? // Department/division
  supervisorId   String? // FK to supervisor staff record
  isActive       Boolean @default(true)
  canApproveCAFs Boolean @default(false)
  canSignCAFs    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  party         party                    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  supervisor    staff?                   @relation("StaffSupervisor", fields: [supervisorId], references: [id])
  subordinates  staff[]                  @relation("StaffSupervisor")
  assigned_cafs corrective_action_form[] @relation("AssignedStaff")
  created_cafs  corrective_action_form[] @relation("CreatedByStaff")
  signatures    caf_signature[]
}

model corrective_action_form {
  id                   String  @id @default(cuid())
  cafNumber            String  @unique // Auto-generated CAF-YYYY-NNNN
  incidentViolationId  String? // FK to unified incident violation

  // Basic Information
  title             String // "Driver Performance - 392.2A(1)"
  description       String // Detailed description of required action
  correctiveActions String? // Manual entry of specific corrective actions required
  notes             String? // Additional notes or special instructions
  priority          CafPriority @default(MEDIUM)
  category          CafCategory // DRIVER_PERFORMANCE, EQUIPMENT_MAINTENANCE, etc.

  // Assignment
  assignedStaffId String // FK to responsible staff member
  assignedBy      String // FK to staff who assigned
  organizationId  String // FK to organization
  dueDate         DateTime? // When CAF must be completed

  // Status and Completion
  status          CafStatus @default(ASSIGNED)
  completionNotes String? // Staff notes on completion
  completedAt     DateTime? // When marked complete

  // Approval and Signatures
  requiresApproval Boolean   @default(true)
  approvedAt       DateTime? // When approved
  approvedBy       String? // FK to approving staff

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  incident_violation incident_violation? @relation(fields: [incidentViolationId], references: [id])
  assigned_staff     staff               @relation("AssignedStaff", fields: [assignedStaffId], references: [id])
  created_by_staff   staff               @relation("CreatedByStaff", fields: [assignedBy], references: [id])
  organization       organization        @relation(fields: [organizationId], references: [id])
  signatures         caf_signature[]
  attachments        attachment[]        @relation("CAFAttachments")
  activity_logs      activity_log[]      @relation("CAFActivityLogs") // Enhanced activity tracking for CAFs
}

model caf_signature {
  id               String        @id @default(cuid())
  cafId            String // FK to corrective_action_form
  staffId          String // FK to staff member who signed
  signatureType    SignatureType // COMPLETION, APPROVAL, WITNESS
  signedAt         DateTime      @default(now())
  digitalSignature String? // Encrypted signature data
  ipAddress        String? // IP where signature was made
  notes            String? // Optional signature notes

  // Relations
  corrective_action_form corrective_action_form @relation(fields: [cafId], references: [id], onDelete: Cascade)
  staff                  staff                  @relation(fields: [staffId], references: [id])

  @@unique([cafId, staffId, signatureType]) // Prevent duplicate signatures
}

// Enums for CAF System
enum CafPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CafCategory {
  DRIVER_PERFORMANCE // 391.x, 392.x violations
  DRIVER_QUALIFICATION // 391.x violations
  EQUIPMENT_MAINTENANCE // 393.x, 396.x violations
  COMPANY_OPERATIONS // 390.x violations
  SAFETY_MANAGEMENT // General safety issues
  OTHER // Miscellaneous
}

enum CafStatus {
  ASSIGNED // CAF assigned to staff
  IN_PROGRESS // Work has begun
  COMPLETED // Work complete, awaiting approval
  APPROVED // Approved and closed
  REJECTED // Rejected, needs rework
  CANCELLED // CAF cancelled
}

enum SignatureType {
  COMPLETION // Staff completing the CAF
  APPROVAL // Supervisor approving completion
  WITNESS // Witness to completion (if required)
}

// Equipment-related lookup tables for dynamic enum management
model EquipmentStatus {
  id          String @id @default(cuid())
  code        String // ACTIVE, INACTIVE, MAINTENANCE, RETIRED
  label       String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Organization that manages this option (null = system default)
  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])
  
  // Usage tracking
  equipment equipment[]
  
  @@unique([code, organizationId])
  @@map("equipment_status")
}

model EquipmentFuelType {
  id          String @id @default(cuid())
  code        String // Gasoline, Diesel, Propane, Electric
  label       String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])
  
  equipment equipment[]
  
  @@unique([code, organizationId])
  @@map("equipment_fuel_type")
}

model EquipmentVehicleType {
  id          String @id @default(cuid())
  code        String // PDC-Day Cab, PSC-Sleeper Cab, etc.
  label       String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])
  
  equipment equipment[]
  
  @@unique([code, organizationId])
  @@map("equipment_vehicle_type")
}

model EquipmentColor {
  id          String @id @default(cuid())
  code        String // White, Black, Red, etc.
  label       String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])
  
  equipment equipment[]
  
  @@unique([code, organizationId])
  @@map("equipment_color")
}

model EquipmentOwnershipType {
  id          String @id @default(cuid())
  code        String // Owner Operator, Leased, Owned, Rent
  label       String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])
  
  equipment equipment[]
  
  @@unique([code, organizationId])
  @@map("equipment_ownership_type")
}

model EquipmentCategory {
  id          String @id @default(cuid())
  code        String // Power, Trailer
  label       String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  organizationId String?
  organization   organization? @relation(fields: [organizationId], references: [id])
  
  equipment equipment[]
  
  @@unique([code, organizationId])
  @@map("equipment_category")
}
