generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accident_issue {
  id           String   @id
  issueId      String   @unique
  accidentDate DateTime
  location     String?
  severity     String
  reportNumber String?
  isReportable Boolean  @default(false)
  issue        issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model consultant {
  id              String         @id
  partyId         String         @unique
  licenseNumber   String?
  specializations String[]
  yearsExperience Int?
  hourlyRate      Decimal?
  bio             String?
  isActive        Boolean        @default(true)
  isVerified      Boolean        @default(false)
  party           party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
  consultation    consultation[]
}

model consultant_access_log {
  id                   String               @id
  consentId            String
  accessedAt           DateTime             @default(now())
  action               String
  resourceType         String
  resourceId           String?
  details              String?
  ipAddress            String?
  userAgent            String?
  data_sharing_consent data_sharing_consent @relation(fields: [consentId], references: [id], onDelete: Cascade)
}

model consultation {
  id                   String                @id
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  clientOrgId          String
  consultantId         String
  title                String
  description          String?
  consultationType     String
  status               String                @default("REQUESTED")
  urgency              String                @default("NORMAL")
  requestedAt          DateTime              @default(now())
  acceptedAt           DateTime?
  startDate            DateTime?
  endDate              DateTime?
  dataAccessExpiry     DateTime?
  agreedRate           Decimal?
  estimatedHours       Int?
  actualHours          Decimal?
  organization         organization          @relation(fields: [clientOrgId], references: [id])
  consultant           consultant            @relation(fields: [consultantId], references: [id])
  data_sharing_consent data_sharing_consent?
}

model data_sharing_consent {
  id                    String                  @id
  consultationId        String                  @unique
  consentGivenAt        DateTime                @default(now())
  consentGivenBy        String
  isActive              Boolean                 @default(true)
  revokedAt             DateTime?
  revokedBy             String?
  scopePermissions      Json
  consultant_access_log consultant_access_log[]
  consultation          consultation            @relation(fields: [consultationId], references: [id], onDelete: Cascade)
}

model equipment {
  id                 String    @id
  partyId            String    @unique
  vehicleType        String
  make               String?
  model              String?
  year               Int?
  vinNumber          String?   @unique
  plateNumber        String?
  registrationExpiry DateTime?
  locationId         String?   // Equipment can be assigned to specific location
  party              party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
  location           location? @relation(fields: [locationId], references: [id])
}

model inspection_issue {
  id             String   @id
  issueId        String   @unique
  inspectionDate DateTime
  inspectorName  String?
  violationCount Int      @default(0)
  outOfService   Boolean  @default(false)
  issue          issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model issue {
  id               String            @id
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  issueType        String
  status           String            @default("open")
  priority         String            @default("medium")
  partyId          String
  title            String
  description      String?
  dueDate          DateTime?
  resolvedAt       DateTime?
  accident_issue   accident_issue?
  inspection_issue inspection_issue?
  party            party             @relation(fields: [partyId], references: [id])
  license_issue    license_issue?
  training_issue   training_issue?
  attachments      attachment[]      // Issue can have multiple attachments
}

model license_issue {
  id               String    @id @default(cuid())
  issueId          String    @unique
  licenseType      String
  licenseState     String
  licenseNumber    String
  certification    String
  startDate        DateTime?
  expirationDate   DateTime
  renewalDate      DateTime?
  endorsements     Json?
  restrictions     Json?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  issue            issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model training_issue {
  id               String    @id @default(cuid())
  issueId          String    @unique
  trainingType     String    // HazMat Annual, Defensive Driving, etc.
  provider         String?   // Training company/organization
  instructor       String?   // Instructor name
  location         String?   // Training location
  startDate        DateTime? // When training period started
  completionDate   DateTime  // When training was completed
  expirationDate   DateTime  // When training expires
  certificateNumber String?  // Certificate/completion number
  hours            Float?    // Training hours completed
  isRequired       Boolean   @default(false) // Required vs voluntary
  competencies     Json?     // Skills/topics covered
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  issue            issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model attachment {
  id           String   @id @default(cuid())
  issueId      String   // Links to any issue (license, inspection, etc.)
  fileName     String   // Original filename
  fileType     String   // MIME type (image/jpeg, application/pdf, etc.)
  fileSize     Int      // File size in bytes
  filePath     String   // Storage path/URL (empty for notes)
  attachmentType String // 'license_front', 'license_back', 'note', 'endorsement_doc', etc.
  description  String?  // Optional description
  noteContent  String?  // For text-based addons (notes)
  uploadedBy   String   // User ID who uploaded
  createdAt    DateTime @default(now())
  
  // Relationships
  issue        issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model location {
  id               String       @id
  partyId          String?      @unique  // NEW: Makes location a party entity
  organizationId   String       // Keep for backward compatibility during transition
  name             String
  locationType     String       // terminal, yard, office, warehouse
  address          String
  city             String
  state            String
  zipCode          String
  phone            String?
  email            String?
  isMainLocation   Boolean      @default(false)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  party            party?       @relation(fields: [partyId], references: [id], onDelete: Cascade)
  organization     organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  equipment        equipment[]
  role             role[]       // Staff and drivers assigned to this location
}

model organization {
  id           String         @id
  partyId      String         @unique
  name         String
  dotNumber    String?        @unique
  einNumber    String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  phone        String?
  consultation consultation[]
  location     location[]
  party        party          @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model party {
  id           String        @id
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       String        @default("active")
  userId       String?
  consultant   consultant?
  equipment    equipment?
  issue        issue[]
  organization organization?
  location     location?     // NEW: Location can be a party
  person       person?
  role         role[]
}

model person {
  id            String    @id
  partyId       String    @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime?
  licenseNumber String?   @unique
  phone         String?
  email         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  party         party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

model role {
  id             String    @id
  partyId        String
  roleType       String
  organizationId String?
  locationId     String?   // Role can be assigned to specific location
  status         String    @default("pending")
  startDate      DateTime  @default(now())
  endDate        DateTime?
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  consultationId String?
  party          party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
  location       location? @relation(fields: [locationId], references: [id])
}
